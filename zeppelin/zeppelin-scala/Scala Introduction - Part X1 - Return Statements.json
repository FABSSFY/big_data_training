{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449371959_1141539453","id":"20160620-190251_1678678789","dateCreated":"Jun 20, 2016 7:02:51 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:232","text":"%md\n# Return Statements are Evil!\nLet us first define a small Array containign some numbers","dateUpdated":"Jun 20, 2016 7:03:32 PM","dateFinished":"Jun 20, 2016 7:03:30 PM","dateStarted":"Jun 20, 2016 7:03:30 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Return Statements are Evil!</h1>\n<p>Let us first define a small Array containign some numbers</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449113635_971685110","id":"20160620-185833_1614598848","dateCreated":"Jun 20, 2016 6:58:33 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109","text":"val numbers = Array(11,23,34,46,56)","dateUpdated":"Jun 20, 2016 7:03:44 PM","dateFinished":"Jun 20, 2016 7:03:44 PM","dateStarted":"Jun 20, 2016 7:03:44 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"numbers: Array[Int] = Array(11, 23, 34, 46, 56)\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449426487_762823942","id":"20160620-190346_2074024414","dateCreated":"Jun 20, 2016 7:03:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:254","text":"%md\n## Traditional add\nFirst let us define a helper method called \"add\", without using return. Everything will work out fine.","dateUpdated":"Jun 20, 2016 7:05:23 PM","dateFinished":"Jun 20, 2016 7:05:23 PM","dateStarted":"Jun 20, 2016 7:05:23 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Traditional add</h2>\n<p>First let us define a helper method called &ldquo;add&rdquo;, without using return. Everything will work out fine.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449157074_-2082589576","id":"20160620-185917_42615001","dateCreated":"Jun 20, 2016 6:59:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:130","dateUpdated":"Jun 20, 2016 6:59:56 PM","dateFinished":"Jun 20, 2016 6:59:57 PM","dateStarted":"Jun 20, 2016 6:59:56 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"add: (n: Int, m: Int)Int\nres90: Int = 15\n"},"text":"def add(n:Int, m:Int): Int = n + m\n\nnumbers.foldLeft(0)(add)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449474261_1267891978","id":"20160620-190434_1313311681","dateCreated":"Jun 20, 2016 7:04:34 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:278","text":"%md\n## Add with return\nNow let us define another method which will use return for the result. Everything still perfetc, so what's the fuss?","dateUpdated":"Jun 20, 2016 7:06:29 PM","dateFinished":"Jun 20, 2016 7:06:29 PM","dateStarted":"Jun 20, 2016 7:06:29 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Add with return</h2>\n<p>Now let us define another method which will use return for the result. Everything still perfetc, so what's the fuss?</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449202231_1755958255","id":"20160620-190002_1302533179","dateCreated":"Jun 20, 2016 7:00:02 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:170","text":"def addR(n:Int, m:Int):Int = return n + m\n\nnumbers.foldLeft(0)(addR)","dateUpdated":"Jun 20, 2016 7:00:33 PM","dateFinished":"Jun 20, 2016 7:00:33 PM","dateStarted":"Jun 20, 2016 7:00:33 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"addR: (n: Int, m: Int)Int\nres93: Int = 15\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449543313_647550869","id":"20160620-190543_1959127488","dateCreated":"Jun 20, 2016 7:05:43 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:298","text":"%md\n## Inlining\nSince everything worked out so far, let's inline the small add (and addR) method into the foldLeft call.","dateUpdated":"Jun 20, 2016 7:07:13 PM","dateFinished":"Jun 20, 2016 7:07:13 PM","dateStarted":"Jun 20, 2016 7:07:13 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Inlining</h2>\n<p>Since everything worked out so far, let's inline the small add (and addR) method into the foldLeft call.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449196857_-1885152094","id":"20160620-185956_531903700","dateCreated":"Jun 20, 2016 6:59:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:150","dateUpdated":"Jun 20, 2016 7:00:59 PM","dateFinished":"Jun 20, 2016 7:00:59 PM","dateStarted":"Jun 20, 2016 7:00:59 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"res95: Int = 15\n"},"text":"numbers.foldLeft(0)(_ + _)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449259336_1442849271","id":"20160620-190059_38202717","dateCreated":"Jun 20, 2016 7:00:59 PM","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:190","dateUpdated":"Jun 20, 2016 7:01:39 PM","dateFinished":"Jun 20, 2016 7:01:39 PM","dateStarted":"Jun 20, 2016 7:01:39 PM","result":{"code":"ERROR","type":"TEXT","msg":"<console>:31: error: return outside method definition\n              numbers.foldLeft(0)((x,y) => return x + y)\n                                           ^\n"},"text":"numbers.foldLeft(0)((x,y) => return x + y)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449597555_-1097023237","id":"20160620-190637_475598278","dateCreated":"Jun 20, 2016 7:06:37 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:324","text":"%md\n## Huh?\nThat was strange. Ok, let's put everything into a method definition, to make Scala happy. But maybe, we are onto something... Let's see.","dateUpdated":"Jun 20, 2016 7:07:22 PM","dateFinished":"Jun 20, 2016 7:07:20 PM","dateStarted":"Jun 20, 2016 7:07:20 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Huh?</h2>\n<p>That was strange. Ok, let's put everything into a method definition, to make Scala happy. But maybe, we are onto something&hellip; Let's see.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449282246_-1997196102","id":"20160620-190122_123774119","dateCreated":"Jun 20, 2016 7:01:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:210","dateUpdated":"Jun 20, 2016 7:08:53 PM","dateFinished":"Jun 20, 2016 7:08:54 PM","dateStarted":"Jun 20, 2016 7:08:53 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"sum: (ns: Iterable[Int])Int\nres104: Int = 170\n"},"text":"def sum(ns:Iterable[Int]):Int = ns.foldLeft(0)((x,y) => x + y)\n\nsum(numbers)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449672951_523847258","id":"20160620-190752_1863830951","dateCreated":"Jun 20, 2016 7:07:52 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:354","dateUpdated":"Jun 20, 2016 7:08:55 PM","dateFinished":"Jun 20, 2016 7:08:56 PM","dateStarted":"Jun 20, 2016 7:08:55 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"sumR: (ns: Iterable[Int])Int\nres107: Int = 11\n"},"text":"def sumR(ns:Iterable[Int]):Int = ns.foldLeft(0)((x,y) => return x + y)\n\nsumR(numbers)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449748741_-29482957","id":"20160620-190908_781899595","dateCreated":"Jun 20, 2016 7:09:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:401","text":"%md\n# WTF ?!?\n\n>\n> A return expression, when evaluated, abandons the current computation and returns to the caller of the method in which return appears.\n>\n\nSee [more tidbits](https://tpolecat.github.io/2014/05/09/return.html)","dateUpdated":"Jun 20, 2016 7:28:18 PM","dateFinished":"Jun 20, 2016 7:27:55 PM","dateStarted":"Jun 20, 2016 7:27:55 PM","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>WTF ?!?</h1>\n<blockquote><p>A return expression, when evaluated, abandons the current computation and returns to the caller of the method in which return appears.</p>\n</blockquote>\n<p>See <a href=\"https://tpolecat.github.io/2014/05/09/return.html\">more tidbits</a></p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1466449692883_-1706896217","id":"20160620-190812_982662877","dateCreated":"Jun 20, 2016 7:08:12 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:374"}],"name":"Scala Introduction - Part X1 - Return Statements","id":"2BR14HBVA","angularObjects":{"2B44YVSN1":[],"2AJXGMUUJ":[],"2AK8P7CPX":[],"2AM1YV5CU":[],"2AKK3QQXU":[],"2ANGGHHMQ":[]},"config":{"looknfeel":"default"},"info":{}}
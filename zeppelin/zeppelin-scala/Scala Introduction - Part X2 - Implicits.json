{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717650736_183554414","id":"20170129-112050_2092779302","dateCreated":"2017-01-29T11:20:50-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30483","text":"%md\n# Implcit Parameters\nThis example is taken from the official Scala documentation and uses a structure from abstract algebra to show how implicit parameters work.\n\n## Semigroup\nA semigroup is an algebraic structure on a set A with an (associative) operation, called add here, that combines a pair of A's and returns another A.","dateUpdated":"2017-01-29T11:22:22-0800","dateFinished":"2017-01-29T11:22:19-0800","dateStarted":"2017-01-29T11:22:19-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Implcit Parameters</h1>\n<p>This example is taken from the official Scala documentation and uses a structure from abstract algebra to show how implicit parameters work.</p>\n<h2>Semigroup</h2>\n<p>A semigroup is an algebraic structure on a set A with an (associative) operation, called add here, that combines a pair of A's and returns another A.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717371539_1098722095","id":"20170129-111611_292719713","dateCreated":"2017-01-29T11:16:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30339","text":"abstract class SemiGroup[A] {\n  def add(x: A, y: A): A\n}","dateUpdated":"2017-01-29T11:23:20-0800","dateFinished":"2017-01-29T11:23:20-0800","dateStarted":"2017-01-29T11:23:20-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined class SemiGroup\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717724111_995297973","id":"20170129-112204_2041539516","dateCreated":"2017-01-29T11:22:04-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30566","text":"%md\n## Monoid\n\nA monoid is a semigroup with a distinguished element of A, called unit, that when combined with any other element of A returns that other element again.","dateUpdated":"2017-01-29T11:23:08-0800","dateFinished":"2017-01-29T11:23:08-0800","dateStarted":"2017-01-29T11:23:08-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Monoid</h2>\n<p>A monoid is a semigroup with a distinguished element of A, called unit, that when combined with any other element of A returns that other element again.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717637080_808386628","id":"20170129-112037_849005875","dateCreated":"2017-01-29T11:20:37-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30413","text":"abstract class Monoid[A] extends SemiGroup[A] {\n  def unit: A\n}","dateUpdated":"2017-01-29T11:23:22-0800","dateFinished":"2017-01-29T11:23:22-0800","dateStarted":"2017-01-29T11:23:22-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined class Monoid\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717818336_-866163178","id":"20170129-112338_83164503","dateCreated":"2017-01-29T11:23:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30819","text":"%md\nTo show how implicit parameters work, we first define monoids for strings and integers. The implicit keyword indicates that the corresponding object can be used implicitly, within this scope, as a parameter of a function marked implicit.","dateUpdated":"2017-01-29T11:23:59-0800","dateFinished":"2017-01-29T11:23:55-0800","dateStarted":"2017-01-29T11:23:55-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<p>To show how implicit parameters work, we first define monoids for strings and integers. The implicit keyword indicates that the corresponding object can be used implicitly, within this scope, as a parameter of a function marked implicit.</p>\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717771164_1691586213","id":"20170129-112251_2133971726","dateCreated":"2017-01-29T11:22:51-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30657","text":"implicit object StringMonoid extends Monoid[String] {\n    def add(x: String, y: String): String = x concat y\n    def unit: String = \"\"\n}\nimplicit object IntMonoid extends Monoid[Int] {\n    def add(x: Int, y: Int): Int = x + y\n    def unit: Int = 0\n}","dateUpdated":"2017-01-29T11:23:52-0800","dateFinished":"2017-01-29T11:23:24-0800","dateStarted":"2017-01-29T11:23:24-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined object StringMonoid\n\ndefined object IntMonoid\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717788279_-892372076","id":"20170129-112308_245724678","dateCreated":"2017-01-29T11:23:08-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30727","dateUpdated":"2017-01-29T11:24:23-0800","dateFinished":"2017-01-29T11:24:19-0800","dateStarted":"2017-01-29T11:24:19-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Summing Up</h2>\n<p>This method takes a List[A] returns an A which represent the combined value of applying the monoid operation successively across the whole list. Making the parameter m implicit here means we only have to provide the xs parameter at the call site, since if we have a List[A] we know what type A actually is and therefore what type Monoid[A] is needed. We can then implicitly find whichever val or object in the current scope also has that type and use that without needing to specify it explicitly.</p>\n"},"text":"%md\n## Summing Up\n\nThis method takes a List[A] returns an A which represent the combined value of applying the monoid operation successively across the whole list. Making the parameter m implicit here means we only have to provide the xs parameter at the call site, since if we have a List[A] we know what type A actually is and therefore what type Monoid[A] is needed. We can then implicitly find whichever val or object in the current scope also has that type and use that without needing to specify it explicitly."},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717859671_-784334256","id":"20170129-112419_189027157","dateCreated":"2017-01-29T11:24:19-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30901","dateUpdated":"2017-01-29T11:26:34-0800","dateFinished":"2017-01-29T11:26:34-0800","dateStarted":"2017-01-29T11:26:34-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"\nsum_all: [A](xs: List[A])(implicit m: Monoid[A])A\n"},"text":"def sum_all[A](xs: List[A])(implicit m: Monoid[A]): A = {\n    if (xs.isEmpty) m.unit\n    else m.add(xs.head, sum_all(xs.tail))\n}"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717878719_-2143636796","id":"20170129-112438_1909505127","dateCreated":"2017-01-29T11:24:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30977","dateUpdated":"2017-01-29T11:25:11-0800","dateFinished":"2017-01-29T11:25:08-0800","dateStarted":"2017-01-29T11:25:08-0800","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Here we call sum twice, with only one parameter each time. Since the second parameter of sum, m, is implicit its value is looked up in the current scope, based on the type of monoid required in each case, meaning both expressions can be fully evaluated.</p>\n"},"text":"%md\nHere we call sum twice, with only one parameter each time. Since the second parameter of sum, m, is implicit its value is looked up in the current scope, based on the type of monoid required in each case, meaning both expressions can be fully evaluated.\n"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717908675_182964994","id":"20170129-112508_1896924361","dateCreated":"2017-01-29T11:25:08-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31055","dateUpdated":"2017-01-29T11:26:38-0800","dateFinished":"2017-01-29T11:26:39-0800","dateStarted":"2017-01-29T11:26:39-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"6\n"},"text":"println(sum_all(List(1, 2, 3)))          // uses IntMonoid implicitly"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485717926799_-722333844","id":"20170129-112526_700056827","dateCreated":"2017-01-29T11:25:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31131","text":"println(sum_all(List(\"a\", \"b\", \"c\"))) // uses StringMonoid implicitly","dateUpdated":"2017-01-29T11:26:49-0800","dateFinished":"2017-01-29T11:26:49-0800","dateStarted":"2017-01-29T11:26:49-0800","result":{"code":"SUCCESS","type":"TEXT","msg":"abc\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485718009076_685401085","id":"20170129-112649_5494678","dateCreated":"2017-01-29T11:26:49-0800","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31229"}],"name":"Scala Introduction - Part X2 - Implicits","id":"2C73TDJFT","angularObjects":{"2C73P7NJN:shared_process":[],"2C7KU6EWG:shared_process":[],"2C8H7AG7Q:shared_process":[],"2CANY5QMM:shared_process":[],"2C7YM9SBT:shared_process":[],"2CAHZM5EW:shared_process":[],"2CA194TC4:shared_process":[],"2C85Z5A3J:shared_process":[],"2C77BBC6M:shared_process":[],"2C9T8R64M:shared_process":[],"2C82H3SUX:shared_process":[],"2C7W1UTSM:shared_process":[],"2C99CAHNC:shared_process":[],"2C7VKNJZ3:shared_process":[],"2C7MNAP62:shared_process":[],"2C8SJ4SC1:shared_process":[],"2C8273BS9:shared_process":[],"2CA9V89Q3:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}
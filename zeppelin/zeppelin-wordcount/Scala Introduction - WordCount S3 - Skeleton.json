{"paragraphs":[{"text":"%md\n# Word Count Example\n\nThe most famous example for map/reduce, Hadoop and Spark is to count words. In this example we'll try to count the words from \"Alice in Wonderland\". The text is stored on S3, so we need some boilerplate code to read the data.","dateUpdated":"2017-02-27T15:58:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488211105181_2029648465","id":"20170130-182643_1375102092","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Word Count Example</h1>\n<p>The most famous example for map/reduce, Hadoop and Spark is to count words. In this example we'll try to count the words from &ldquo;Alice in Wonderland&rdquo;. The text is stored on S3, so we need some boilerplate code to read the data.</p>\n"},"dateCreated":"2017-02-27T15:58:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20216"},{"text":"import scala.io.Source\nimport com.amazonaws.services.s3.AmazonS3Client\nimport com.amazonaws.services.s3.model.GetObjectRequest\nimport com.amazonaws.auth.DefaultAWSCredentialsProviderChain\n\nval bucketName = \"dimajix-training\"\nval key = \"data/alice/alice-in-wonderland.txt\"\n\nval s3Client = new AmazonS3Client(new DefaultAWSCredentialsProviderChain())\nval s3object = s3Client.getObject(new GetObjectRequest(bucketName, key))\nval source = Source.fromInputStream(s3object.getObjectContent())\n\n// Lets peek inside\nsource.getLines.take(10).foreach(println)","dateUpdated":"2017-02-27T16:01:40+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488211105181_2029648465","id":"20170130-173712_1377286099","dateCreated":"2017-02-27T15:58:25+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20217","dateFinished":"2017-02-27T16:01:43+0000","dateStarted":"2017-02-27T16:01:40+0000","focus":true},{"text":"%md\n## Performing the Word Count\nNow that we've figured out how to read the data, let's try to perform the word count. We'll perform the following steps:\n1. Retrieve all lines from the source\n2. Split all lines into individual words\n3. Remove empty words\n4. Group result by word\n5. Retrieve the size of every group\n6. Sort the result by frequency, in reverse order","dateUpdated":"2017-02-27T15:58:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488211105181_2029648465","id":"20170130-182710_878366452","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Performing the Word Count</h2>\n<p>Now that we've figured out how to read the data, let's try to perform the word count. We'll perform the following steps:</p>\n<ol>\n<li>Retrieve all lines from the source</li>\n<li>Split all lines into individual words</li>\n<li>Remove empty words</li>\n<li>Group result by word</li>\n<li>Retrieve the size of every group</li>\n<li>Sort the result by frequency, in reverse order</li>\n</ol>\n"},"dateCreated":"2017-02-27T15:58:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20218"},{"text":"val s3object = s3Client.getObject(new GetObjectRequest(bucketName, key))\nval source = Source.fromInputStream(s3object.getObjectContent())\n// Lets count the words\n","dateUpdated":"2017-02-27T15:58:25+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488211105181_2029648465","id":"20170130-173723_649915494","dateCreated":"2017-02-27T15:58:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20219","focus":true},{"text":"","dateUpdated":"2017-02-27T15:58:25+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1488211105181_2029648465","id":"20170130-181527_451771688","dateCreated":"2017-02-27T15:58:25+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20220"}],"name":"Scala Introduction - WordCount S3 - Skeleton","id":"2CB85QXEN","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}